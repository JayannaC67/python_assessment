{"name": "test_homepage_validation", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=131.0.6778.140)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7D4F86CC5+28821]\n\t(No symbol) [0x00007FF7D4EF3850]\n\t(No symbol) [0x00007FF7D4D9578A]\n\t(No symbol) [0x00007FF7D4D6F4F5]\n\t(No symbol) [0x00007FF7D4E16247]\n\t(No symbol) [0x00007FF7D4E2ECE2]\n\t(No symbol) [0x00007FF7D4E0F0A3]\n\t(No symbol) [0x00007FF7D4DDA778]\n\t(No symbol) [0x00007FF7D4DDB8E1]\n\tGetHandleVerifier [0x00007FF7D52BFCCD+3408029]\n\tGetHandleVerifier [0x00007FF7D52D743F+3504143]\n\tGetHandleVerifier [0x00007FF7D52CB61D+3455469]\n\tGetHandleVerifier [0x00007FF7D504BDCB+835995]\n\t(No symbol) [0x00007FF7D4EFEB6F]\n\t(No symbol) [0x00007FF7D4EFA824]\n\t(No symbol) [0x00007FF7D4EFA9BD]\n\t(No symbol) [0x00007FF7D4EEA1A9]\n\tBaseThreadInitThunk [0x00007FF8CE20259D+29]\n\tRtlUserThreadStart [0x00007FF8CFE6AF38+40]", "trace": "self = <Test_scripts.Test_Stakify.Test_Stakify_e2e object at 0x000001A406623110>\nreadJson = {'Email': 'jayannajay7@gmail.com', 'First_name': 'jayanna', 'Last_name': 'C', 'Note': 'Note added', ...}\n\n    def test_homepage_validation(self, readJson):\n        homepage = Stakify_page_object(self.driver)  # Activating the driver which we have created in supporting file (qualitrix_page_object.py).\n        homepage.launch_the_app(readJson['stakify_url'])\n        homepage.test_validate_url(readJson)\n        homepage.validate_headermenu()\n>       homepage.test_mouseoveraction()\n\nTest_scripts\\Test_Stakify.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPage_objects\\Stackify_pageobjects.py:67: in test_mouseoveraction\n    self.driver.find_element(By.XPATH,Stackify_locators.Bylanguage()).click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:770: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001A40677CAD0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF7D4EEA1A9]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8CE20259D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF8CFE6AF38+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=131.0.6778.140)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7D4F86CC5+28821]\nE       \t(No symbol) [0x00007FF7D4EF3850]\nE       \t(No symbol) [0x00007FF7D4D9578A]\nE       \t(No symbol) [0x00007FF7D4D6F4F5]\nE       \t(No symbol) [0x00007FF7D4E16247]\nE       \t(No symbol) [0x00007FF7D4E2ECE2]\nE       \t(No symbol) [0x00007FF7D4E0F0A3]\nE       \t(No symbol) [0x00007FF7D4DDA778]\nE       \t(No symbol) [0x00007FF7D4DDB8E1]\nE       \tGetHandleVerifier [0x00007FF7D52BFCCD+3408029]\nE       \tGetHandleVerifier [0x00007FF7D52D743F+3504143]\nE       \tGetHandleVerifier [0x00007FF7D52CB61D+3455469]\nE       \tGetHandleVerifier [0x00007FF7D504BDCB+835995]\nE       \t(No symbol) [0x00007FF7D4EFEB6F]\nE       \t(No symbol) [0x00007FF7D4EFA824]\nE       \t(No symbol) [0x00007FF7D4EFA9BD]\nE       \t(No symbol) [0x00007FF7D4EEA1A9]\nE       \tBaseThreadInitThunk [0x00007FF8CE20259D+29]\nE       \tRtlUserThreadStart [0x00007FF8CFE6AF38+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException"}, "attachments": [{"name": "stdout", "source": "906b8603-21a6-493c-b6f2-a6a78f2905d6-attachment.txt", "type": "text/plain"}], "start": 1734445037220, "stop": 1734445043564, "uuid": "c5d9c261-96e8-4fab-bd5d-d6009d7819d4", "historyId": "2393f4ccffd77055625fee7edbe16d29", "testCaseId": "2393f4ccffd77055625fee7edbe16d29", "fullName": "Test_scripts.Test_Stakify.Test_Stakify_e2e#test_homepage_validation", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('browser_crbt')"}, {"name": "parentSuite", "value": "Test_scripts"}, {"name": "suite", "value": "Test_Stakify"}, {"name": "subSuite", "value": "Test_Stakify_e2e"}, {"name": "host", "value": "Jayanna"}, {"name": "thread", "value": "15396-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_scripts.Test_Stakify"}]}